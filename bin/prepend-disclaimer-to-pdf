#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2014 Martin Ueding <dev@martin-ueding.de>

'''
Prepends a disclaimer page to all PDF files.
'''

import argparse
import os.path
import re
import subprocess
import tempfile

PDF_PATTERN = re.compile(r'''
                         (?P<module>(math|physik|physics)\d{3})
                         -[^-]+
                         -(?P<kind>abgegeben|korrigiert|handed_in|reviewed)
                         \.pdf
                         ''', re.X)

'''
Matches filenames.
'''

def get_kind(filename):
    '''
    Determines the kind of the PDF.

    This can be either German or English and either reviewed or not.

    :rtype: tuple
    '''
    module = None
    language = None
    reviewed = None

    match = PDF_PATTERN.match(filename)
    if match:
        kind = match.group('kind')
        if kind == 'abgegeben':
            language = 'de'
            reviewed = False
        elif kind == 'korrigiert':
            language = 'de'
            reviewed = True
        elif kind == 'handed_in':
            language = 'en'
            reviewed = False
        elif kind == 'reviewed':
            language = 'en'
            reviewed = True

        module = match.group('module')

    print(filename, module, language, reviewed)

    return module, language, reviewed

def create_document(title, text):
    text = r'''
    \documentclass[11pt, ngerman]{{scrartcl}}
    \usepackage{{/home/mu/Vorlagen/header}}
    \pagestyle{{empty}}
    \pagecolor{{YellowOrange!60}}
    {title}
    \begin{{document}}
    {text}

    \vfill
    \begin{{small}}
    [disclaimer]
    \end{{small}}
    \end{{document}}
    '''.format(title=title, text=text)

    return text



def create_text(module, language, reviewed):
    title = ''
    text = ''
    if language == 'de' and reviewed:
        text = r'''
        \section*{{Vorbemerkung}}

        Dies ist ein korrigierter Übungszettel aus dem Modul {module}.

        Alle Übungszettel zu diesem Modul können auf
        \url{{http://martin-ueding.de/de/university/{module}/}} gefunden werden.

        Dieser Übungszettel wurde von einem Tutor korrigiert. \emph{{Dies
        bedeutet jedoch nicht, dass es sich um eine Musterlösung handelt. Weder
        ich, noch der Tutor implizieren, dass dieses Dokument keine Fehler
        enthält.}}

        Dieses Werk von Martin Ueding ist lizenziert unter einer
        \href{{http://creativecommons.org/licenses/by-sa/4.0/}}{{Creative
        Commons Namensnennung - Weitergabe unter gleichen Bedingungen 4.0
        International Lizenz}}.
        '''.format(module=module)

    elif language == 'de' and not reviewed:
        text = r'''
        \section*{{Vorbemerkung}}
        Dies ist ein Übungszettel aus dem Modul {module}, den ich so abgegeben
        habe.

        Alle Übungszettel zu diesem Modul können auf
        \url{{http://martin-ueding.de/de/university/{module}/}} gefunden werden.

        \emph{{Dieser Übungszettel wurde nicht korrigiert. Es handelt sich
        lediglich um meine Abgabe und keine Musterlösung.}}

        Dieses Werk von Martin Ueding ist lizenziert unter einer
        \href{{http://creativecommons.org/licenses/by-sa/4.0/}}{{Creative
        Commons Namensnennung - Weitergabe unter gleichen Bedingungen 4.0
        International Lizenz}}.
        '''.format(module=module)
    else:
        text = 'x'

    return title, text

def create_disclaimer_pdf(text):
    with tempfile.NamedTemporaryFile(mode='w', suffix='.tex') as tf:
        tf.write(text)
        tf.flush()

        print(tf.name)
        command = ['bash', '-c', 'cd {} && pdflatex -batchmode {}'.format(os.path.dirname(tf.name), tf.name)]
        print(command)
        subprocess.check_call(command)
        subprocess.check_call(['okular', tf.name.replace('.tex', '.pdf')])

def handle_file(filename):
    module, language, reviewed = get_kind(os.path.basename(filename))
    title, text = create_text(module, language, reviewed)
    text = create_document(title, text)
    create_disclaimer_pdf(text)

def main():
    options = _parse_args()

    for filename in options.filenames:
        handle_file(filename)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('filenames', metavar='filename', nargs='+')

    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()
