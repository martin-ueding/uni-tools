#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2014 Martin Ueding <dev@martin-ueding.de>

'''
Prepends a disclaimer page to all PDF files.
'''

import argparse
import concurrent.futures
import os
import os.path
import re
import shutil
import subprocess
import tempfile

import jinja2

PDF_PATTERN = re.compile(r'''
                         (?P<module>(math|physik|physics)\d{3})
                         -[^-]+
                         -(?P<kind>abgegeben|korrigiert|handed_in|reviewed)
                         \.pdf
                         ''', re.X)

'''
Matches filenames.
'''

TEXT_DE = r'''
\section*{Vorbemerkung}

Dies ist
{% if reviewed -%}
    {% if is_report -%}
    ein korrigierters Praktikumsprotokoll
    {% else -%}
    ein korrigierter Übungszettel
    {% endif -%}
{% else -%}
    {% if is_report -%}
    ein abgegebenes Praktikumsprotokoll
    {% else -%}
    ein abgegebener Übungszettel
    {% endif -%}
{% endif -%}
aus dem Modul {{ module }}.

{% if reviewed -%}
    {% if is_report -%}
    Dieses Praktikumsprotokoll
    {% else -%}
    Dieser Übungszettel
    {% endif -%}
    wurde von einem Tutor korrigiert. \emph{Dies
    bedeutet jedoch nicht, dass es sich um eine Musterlösung handelt. Weder
    ich, noch der Tutor implizieren, dass dieses Dokument keine Fehler
    enthält.}
{% else -%}
    {% if is_report -%}
    Dieses Praktikumsprotokoll wurde nicht bewertet.
    {% else -%}
    Dieser Übungszettel wurde nicht korrigiert.
    {% endif -%}
    Es handelt sich lediglich um meine Abgabe und keine Musterlösung.
{% endif %}

Alle
{% if is_report -%}
Praktikumsprotokolle
{% else -%}
Übungszettel
{% endif -%}
zu diesem Modul können auf \href{http://martin-ueding.de/de/university/{{ module
}}/#pk_campaign=Zettel&pk_kwd={{ module }}}{http://martin-ueding.de/de/university/{{ module
}}/} gefunden werden.

Sofern im Dokuments nichts anderes angegeben ist: Dieses Werk von Martin Ueding
ist lizenziert unter einer
\href{http://creativecommons.org/licenses/by-sa/4.0/}{Creative Commons
Namensnennung - Weitergabe unter gleichen Bedingungen 4.0 International
Lizenz}.
'''

TEXT_EN = r'''
\section*{Disclaimer}

This is
{% if reviewed -%}
    {% if is_report -%}
    a reviewed lab report
    {% else -%}
    a reviewed problem set
    {% endif -%}
{% else -%}
    {% if is_report -%}
    a lab report (as turned in)
    {% else -%}
    a problem set (as turned in)
    {% endif -%}
{% endif -%}
for the module {{ module }}.

This
{% if reviewed -%}
    {% if is_report -%}
    lab report
    {% else -%}
    problem set
    {% endif -%}
    was reviewed by a tutor. \emph{This does not mean that it is a perfect
    solution. Neither I or the tutor imply that there are no further mistakes
    in this document.}
{% else -%}
    {% if is_report -%}
    lab report is not reviewed by a tutor.
    {% else -%}
    problem set is not reviewed by a tutor.
    {% endif -%}
    This is just what I have turned in.
{% endif %}

All
{% if is_report -%}
lab reports
{% else -%}
problem sets
{% endif -%}
for this module can be found at \href{http://martin-ueding.de/en/university/{{ module
}}/#pk_campaign=Zettel&pk_kwd={{ module }}}{http://martin-ueding.de/de/university/{{ module
}}/}.

If not stated otherwise in the document itself: This work by Martin Ueding is
licensed under a \href{http://creativecommons.org/licenses/by-sa/4.0/}{Creative
Commons Attribution-ShareAlike 4.0 International License}.
'''

TEMPLATE_DE = jinja2.Template(TEXT_DE)
TEMPLATE_EN = jinja2.Template(TEXT_EN)

def get_kind(filename):
    '''
    Determines the kind of the PDF.

    This can be either German or English and either reviewed or not.

    :rtype: tuple
    '''
    module = None
    language = None
    reviewed = None

    match = PDF_PATTERN.match(filename)
    if match:
        kind = match.group('kind')
        if kind == 'abgegeben':
            language = 'de'
            reviewed = False
        elif kind == 'korrigiert':
            language = 'de'
            reviewed = True
        elif kind == 'handed_in':
            language = 'en'
            reviewed = False
        elif kind == 'reviewed':
            language = 'en'
            reviewed = True

        module = match.group('module')

    print(filename, module, language, reviewed)

    return module, language, reviewed

def create_document(title, text):
    text = r'''
    \documentclass[11pt, ngerman]{{scrartcl}}
    \usepackage[color]{{/home/mu/Vorlagen/header}}
    \pagestyle{{empty}}
    \pagecolor{{YellowOrange!60}}
    {title}
    \begin{{document}}
    {text}

    \vfill
    \begin{{small}}
    [disclaimer]
    \end{{small}}
    \end{{document}}
    '''.format(title=title, text=text)

    return text



def create_text(module, language, reviewed):
    title = ''
    text = ''
    is_report = module[-2] == '1' and module[-1] in ['2', '3']
    if language == 'de':
        text = TEMPLATE_DE.render(module=module, reviewed=reviewed,
                                  is_report=is_report)
    else:
        text = TEMPLATE_EN.render(module=module, reviewed=reviewed,
                                  is_report=is_report)

    return title, text

def create_disclaimer_pdf(text):
    with tempfile.NamedTemporaryFile(mode='w', suffix='.tex') as tf:
        tf.write(text)
        tf.flush()

        print(tf.name)
        command = ['bash', '-c', 'cd {} && pdflatex -batchmode {}'.format(os.path.dirname(tf.name), tf.name)]
        print(command)
        subprocess.check_call(command)

    return tf.name.replace('.tex', '.pdf')

def check_for_disclaimer(filename):
    status = subprocess.call(['pdfgrep', r'\[disclaimer\]', filename])
    return status == 0

def handle_file(filename, options):
    has_disclaimer = check_for_disclaimer(filename)
    if has_disclaimer and not options.upgrade:
        return

    module, language, reviewed = get_kind(os.path.basename(filename))
    title, text = create_text(module, language, reviewed)
    text = create_document(title, text)
    disclaimer_pdf = create_disclaimer_pdf(text)
    old_file = filename+'.bak'
    shutil.move(filename, old_file)
    command = [
        'pdftk',
        'A={}'.format(disclaimer_pdf),
        'B={}'.format(old_file),
        'cat',
        'A1',
        'B2-end' if has_disclaimer else 'B1-end',
        'output', filename,
    ]
    subprocess.check_call(command)
    os.oremove(old_file)

def main():
    options = _parse_args()

    futures = []

    with concurrent.futures.ThreadPoolExecutor(6) as executor:
        for filename in options.filenames:
            futures.append(executor.submit(handle_file, filename, options))

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('filenames', metavar='filename', nargs='+')
    parser.add_argument('--upgrade', action='store_true')

    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()
