#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import logging
import re
import os
import subprocess

__docformat__ = "restructuredtext en"

logger = logging.getLogger("lecture-photos")

class Lecture(object):
    def __init__(self, folder, module, date):
        self.folder = folder
        self.module = module
        self.date = date

        self.zipfolder = os.path.join(os.path.expanduser("~"), ".cache", "lecture-photos", module)
        self.zipfile = os.path.join(self.zipfolder, "{}.zip".format(date))

    def auto(self):
        self.create_zip()

    def create_zip(self):
        os.makedirs(self.zipfolder, exist_ok=True)
        if not os.path.isfile(self.zipfile):
            logger.info("Creating ZIP file {}.".format(self.zipfile))
            subprocess.check_call(["zip", "-r", "--compression-method", "store", "--junk-paths", self.zipfile, self.folder])

def upload():
    logger.info("Starting upload.")
    subprocess.check_call(["rsync", "-avhE", "--delete", "--progress", "--exclude=.*", os.path.expanduser("~/.cache/lecture-photos"), "chaos:public_html/"])

def main():
    options = _parse_args()

    # TODO Add -vv CLI argument.
    logging.basicConfig(level=logging.DEBUG)

    pattern = re.compile(r"/([^/]+)/Vorlesungsfotos/(\d{4}-\d{2}-\d{2}(:?_\w{2})?)$")

    output = subprocess.check_output(["find", os.path.expanduser("~/Dokumente/Studium"), "-type", "d", "-print0"])
    folders = output.decode().strip().split("\0")

    for dirpath in folders:
        logger.debug("In folder {}.".format(dirpath))
        m = pattern.search(dirpath)
        if m is not None:
            module = m.group(1)
            date = m.group(2)
            logger.info("Module {}, Date {}".format(module, date))
            lecture = Lecture(dirpath, module, date)
            lecture.auto()

    upload()


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
