#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2012-2013 Martin Ueding <dev@martin-ueding.de>

"""
Goes through the university module folders and gather the latest exercise PDF.
Those PDF files are then used to combined into a new email in Thunderbird.

The email addresses are taken from ``~/.config/peer-review/config.js``.
"""

import argparse
import datetime
import dateutil.parser
import json
import os
import re
import subprocess
import sys

__docformat__ = "restructuredtext en"

root = os.path.expanduser("~/Dokumente/Studium")
"""
Root folder.
"""

modules = [
    "physik411",
    "physik421",
]
"""
List of the current modules.
"""

mailtext = """Hi,

hier der aktuelle Stand der Zettel für {module}.

{mode}

Grüße

Martin"""
"""
The text for the email.
"""

def main():
    options = _parse_args()

    pdf_files = find_pdf_files(modules)

    if not options.force:
        pdf_files = filter(has_changed, pdf_files)

    if len(pdf_files) == 0:
        print "There are no files. You might want to use the ``-f`` option."
        sys.exit(0)

    titles = []
    for pdf_file in pdf_files:
        basename = os.path.basename(pdf_file)
        nameparts = basename.split('-')
        titles.append('-'.join(nameparts[:2]))

    attributes = [
        "preselectid=id4",
        "to='{to}'".format(to=','.join(get_recipients())),
        "subject='Zettel {module}'".format(module=', '.join(sorted(titles))),
        "body='{body}'".format(body=mailtext.format(
            module=", ".join(sorted(titles)),
            mode = "Es wurden alle Zettel, auch ohne neue Änderungen, gesendet." if options.force else "Es wurden nur geänderte Zettel gesendet.",
        )),
        "attachment='{paths}'".format(paths=",".join(pdf_files)),
    ]

    command = ["thunderbird", "-compose", ",".join(attributes)]

    subprocess.check_call(command)

    # Set the new hashes into the file.
    for pdf_file in pdf_files:
        set_last_hash(pdf_file, get_hash(pdf_file))

def find_pdf_files(modules):
    """
    Find the latest PDF files.

    :return: List with absolute paths.
    """
    pdf_files = []

    for modul in modules:
        dirs = os.listdir(os.path.join(root, modul))
        if len(dirs) == 0:
            continue

        for d in dirs:
            try:
                for f in os.listdir(os.path.join(root, modul, d)):
                    regex = r"{modul}-\d+-(Martin|bzr)\.pdf".format(modul=modul)
                    if re.match(regex, f) is not None:
                        pdf_files.append(os.path.join(root, modul, d, f))
            except OSError:
                pass

    return pdf_files

def get_recipients():
    """
    Retrieves the recipients from the config file.

    :return: List with recipients.
    """
    configfile = os.path.expanduser("~/.config/peer-review/config.js")
    if os.path.isfile(configfile):
        with open(configfile) as f:
            config = json.load(f)

        return config["recipients"]

    else:
        return ""

def find_pdf(latest):
    """
    Finds the PDF we are all interested in from the given folder.

    :param latest: Absolute path to the folder.
    :return: Absolute path of the PDF file. None if nothing found.
    """
    files = os.listdir(latest)

    regex = re.compile(r"(\w+\d+)-(\d+)-(Martin|bzr)\.pdf")

    for f in files:
        matcher = regex.match(f)

        if matcher is None:
            continue

        if is_expired(matcher.group(1), matcher.group(2)):
            raise ExpiredException()

        return os.path.join(latest, f)

    return None

def is_expired(modul, number):
    """
    Checks whether the given thing was already due and is therefore not needed
    any more. If the configuration file was not found, nothing is marked as
    expired.

    :return: Whether this sheet is expired.
    """
    datefile = os.path.expanduser("~/.config/peer-review/dates.js")

    if not os.path.isfile(datefile):
        print "No config file found"
        return False

    with open(datefile) as datefile_h:
        dates = json.load(datefile_h)

    try:
        sheet_date = dateutil.parser.parse(dates[modul][number])

        is_old = sheet_date < datetime.datetime.now()

        return is_old
    except KeyError as e:
        print "Cannot find key in ``dates.js``:", e
        return False

def get_hash(filename):
    """
    Retrieves the hash sum of the given file. It uses the system ``sha1sum``.

    >>> get_hash("hello.txt")
    '4ab299c8ad6ed14f31923dd94f8b5f5cb89dfb54'

    :param filename: Filename to hash.
    :return: Hash string.
    """
    hashsum = (subprocess.check_output(["sha1sum", filename]).split())[0]

    return hashsum

hashfile = os.path.expanduser("~/.cache/peer-review-hashes.js")

def get_last_hash(filename):
    """
    Retrieves the last sent hash.
    """
    if not os.path.isfile(hashfile):
        return None

    with open(hashfile) as f:
        hashdata = json.load(f)

    basename = os.path.basename(filename)

    if basename in hashdata:
        return hashdata[basename]

def set_last_hash(filename, hashsum):
    """
    Saves the last sent hash.
    """
    if os.path.isfile(hashfile):
        with open(hashfile) as f:
            hashdata = json.load(f)
    else:
        hashdata = {}

    hashdata[os.path.basename(filename)] = hashsum

    with open(hashfile, "w") as f:
        hashdata = json.dump(hashdata, f, indent=4, sort_keys=True)

def has_changed(filename):
    """
    Checks whether the given file was changed since the last email.
    """
    current_hash = get_hash(filename)

    return current_hash != get_last_hash(filename)

class ExpiredException(Exception):
    pass

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="peer-review", description="Composes a new email with the most current exercises.")
    #parser.add_argument('args', metavar='N', type=str, nargs='*', help='Positional arguments.')
    parser.add_argument("-f", dest="force", action="store_true", help="Send all, regardless of change")
    #parser.add_argument('--version', action='version', version='<the version>')

    return parser.parse_args()

if __name__ == "__main__":
    main()
